package by.bsuir.core.sequence.interceptor;

import by.bsuir.core.sequence.model.AutoGeneratedId;
import by.bsuir.core.sequence.service.SequenceGeneratorService;
import lombok.RequiredArgsConstructor;
import org.aopalliance.intercept.MethodInterceptor;
import org.aopalliance.intercept.MethodInvocation;
import org.springframework.stereotype.Component;
import org.springframework.util.ReflectionUtils;

@Component("sequenceInterceptor")
@RequiredArgsConstructor
public class SequenceInterceptor implements MethodInterceptor {

    private final SequenceGeneratorService sequenceGeneratorService;

    @Override
    public Object invoke(MethodInvocation methodInvocation) throws Throwable {
        var entity = methodInvocation.getArguments()[0];
        var cls = entity.getClass();
        var idField = cls.getDeclaredField("id");
        if (idField.isAnnotationPresent(AutoGeneratedId.class)) {
            ReflectionUtils.makeAccessible(idField);
            if (idField.get(entity) == null) {
                var nameField = cls.getSimpleName().toLowerCase();
                var name = String.format("%ss_sequence", nameField);
                var seq = sequenceGeneratorService.generateSequence(name);
                idField.set(entity, seq);
            }
        }
        return methodInvocation.proceed();
    }
}
